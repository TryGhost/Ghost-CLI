'use strict';
const expect = require('chai').expect;
const proxyquire = require('proxyquire');
const sinon = require('sinon');

const errors = require('../../../lib/errors');
const modulePath = '../../../lib/utils/use-ghost-user';

describe('Unit: Utils > useGhostUser', function () {
    it('returns false if platform is not linux', function () {
        let platformStub = sinon.stub().returns('darwin');
        let useGhostUser = proxyquire(modulePath, {
            os: { platform: platformStub }
        });

        let result = useGhostUser();

        expect(platformStub.calledOnce).to.be.true;
        expect(result).to.be.false;
    });

    it('re-throws error if one is generated by the `id` command', function () {
        let platformStub = sinon.stub().returns('linux');
        let execaStub = sinon.stub().throws(new Error('Some other error message'));
        let useGhostUser = proxyquire(modulePath, {
            os: { platform: platformStub },
            execa: { shellSync: execaStub }
        });

        try {
            useGhostUser();
            expect(false, 'error should have been thrown').to.be.true;
        } catch (e) {
            expect(e).to.be.an.instanceof(errors.ProcessError);
        }

        expect(platformStub.calledOnce).to.be.true;
        expect(execaStub.calledOnce).to.be.true;
    });

    it('returns false if "no such error" error is thrown', function () {
        let platformStub = sinon.stub().returns('linux');
        let execaStub = sinon.stub().throws(new Error('no such user'));
        let useGhostUser = proxyquire(modulePath, {
            os: { platform: platformStub },
            execa: { shellSync: execaStub }
        });

        let result = useGhostUser();
        expect(result).to.be.false;
        expect(platformStub.calledOnce).to.be.true;
        expect(execaStub.calledOnce).to.be.true;
    });

    it('returns false if the ghost owner/group is not the owner of the content folder', function () {
        let platformStub = sinon.stub().returns('linux');
        let execaStub = sinon.stub().returns({stdout: '50'});
        let fsStub = sinon.stub().returns({ uid: 30, gid: 30 });
        let useGhostUser = proxyquire(modulePath, {
            os: { platform: platformStub },
            fs: { lstatSync: fsStub },
            execa: { shellSync: execaStub }
        });

        let result = useGhostUser('/some-dir/content');
        expect(result).to.be.false;
        expect(platformStub.calledOnce).to.be.true;
        expect(execaStub.calledTwice).to.be.true;
        expect(fsStub.calledOnce).to.be.true;
        expect(fsStub.args[0][0]).to.equal('/some-dir/content');
    });

    it('returns false if the current user is ghost', function () {
        let platformStub = sinon.stub().returns('linux');
        let execaStub = sinon.stub().returns({stdout: '50'});
        let fsStub = sinon.stub().returns({ uid: 50, gid: 50 });
        let useGhostUser = proxyquire(modulePath, {
            os: { platform: platformStub },
            fs: { lstatSync: fsStub },
            execa: { shellSync: execaStub }
        });

        let originalGetuid = process.getuid;
        process.getuid = sinon.stub().returns(50);

        let result = useGhostUser('/some-dir/content');
        expect(result).to.be.false;
        expect(platformStub.calledOnce).to.be.true;
        expect(execaStub.calledTwice).to.be.true;
        expect(fsStub.calledOnce).to.be.true;
        expect(process.getuid.calledOnce).to.be.true;

        process.getuid = originalGetuid;
    });

    it('returns true if user is not ghost', function () {
        let platformStub = sinon.stub().returns('linux');
        let execaStub = sinon.stub().returns({stdout: '50'});
        let fsStub = sinon.stub().returns({ uid: 50, gid: 50 });
        let useGhostUser = proxyquire(modulePath, {
            os: { platform: platformStub },
            fs: { lstatSync: fsStub },
            execa: { shellSync: execaStub }
        });

        let originalGetuid = process.getuid;
        process.getuid = sinon.stub().returns(0);

        let result = useGhostUser('/some-dir/content');
        expect(result).to.be.true;
        expect(platformStub.calledOnce).to.be.true;
        expect(execaStub.calledTwice).to.be.true;
        expect(fsStub.calledOnce).to.be.true;
        expect(process.getuid.calledOnce).to.be.true;

        process.getuid = originalGetuid;
    });
});
